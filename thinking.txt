- unit_Interval: int        #单位时间
- velocity: int             #几个单位时间移动一层
- waiting_Time: int         #在每个楼层停留多少单位时间
- max_Layer: int            #最大楼层数
- min_Layer: int            #最小楼层数
- default_Elevator_Number   #默认电梯数

Request
- layer: int                #请求的层数
- is_Up: bool               #是向上还是向下

Status
- state: int                #0停止 1运行 2中停
- remaining_Time: int       #如果正在中停，即state==2，表示中停的剩余单位时间 
                            #如果正在向上或者向下,即state==1，表示到下一层剩余的单位时间

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Task
- layer: int
- in_Or_Out: int            #二进制数，11表示内外，10表示内部，01表示外部，00保存
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

Elevator
- layer: int                #所在层数，初始为0
- operation_Direction       #运行的方向 0代表没有方向 1代表向上 2代表向下
- status: Status        #状态        
- button: {{layer_Num}:(T||F)}
- stop_Task: dict()

- add_Stop_Task() -> void   #电梯增加中停层，电梯已经运行起来了
- call() -> void
- button_Click() -> void
- step() -> Status          #走一步(走一个单位时间)，返回当前状态
- open_Click() -> void
- close_Click() -> void
- alarm_Click() -> void
- can_Stop() -> bool        #判断电梯当前是否能停下
- button_Restoration() -> void #复位
- can_Add_Task() -> bool
- get_Button_State -> list(bool)

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
- wait_Queue: [Request] #等待队列 x我觉得电梯里不需要等待队列
- target_Layer: int         #目标层数 x我觉得当前方向更好？
- stop_Task: [Task]         #停止队列，会在中途哪里停下
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

Elevator_Group
- list: [Elevator]          #电梯的列表s
- wait_Queue: [Request]     #总的等待队列   
- distribute() -> void      #每次循环的最后，开始为等待队列里的request分配电梯
- step() -> void
- add_Request() ->void

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

Floor
- layer: int                #所在层数
- up_Button_State: bool     #上行键状态
- down_Button_State: bool   #下行键状态

Building
- layers: [Floor]
- elevators: Elevator_List

Listener?

























Description 
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
- 我认为一个人在一个楼层按了上行或者下行键，对于电梯组来说，就是要派一个电梯到这一楼。
  所以设计了target_layer，表示这个电梯最终要到达的位置。
  - 那比如现在电梯在10楼，有人在2楼按了电梯，这个时候电梯的target_layer就改成了2。此时，
    如果有人在电梯里按了1，我认为这个时候电梯的target_layer就==不应该==变为1。
  - 也就是说，我暂时不接受interrupt
- 但是我的类的设计实际上不用考虑这些东西，我只需要考虑清楚，有关内容是否都存上了。
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
- 运行的方向不能随意更改
- 如果当前在运行状态：
    如果碰到需要等待的楼层：停下，状态变成2，等待时间复位
    如果不是：继续运行
- 如果当前在等待状态（如果一个命令结束，那么它的前一个状态一定是等待状态）：
