- unit_Interval: int        #单位时间
- velocity: int             #每个单位时间移动多少次
- waiting_Time: int         #在每个楼层停留多少单位时间

Request
- layer: int                #请求的层数
- isUp: bool                #是向上还是向下

Status
- is_Run: bool              #是否正在运行
- state: int                #如果is_Run为1才有效，0代表向上，1代表向下，2代表中停
- remaining_Time: int       #剩余时间 

Elevator
- layer: int                #所在层数，初始为0
- target_Layer: int         #目标层数
- status: Status            #状态        
- stop_Queue: [int]         #停止队列，会在中途哪里停下
- add_Stop_Layer() ->void   #电梯增加中停层
- step() -> int             #走一步(走一层)，返回当前状态

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
- wait_Queue: [Request] #等待队列 x我觉得电梯里不需要等待队列
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

Elevator_List
- list: [Elevator]          #电梯的列表s
- wait_Queue_Up: [int]      #向上的队列
- wait_Queue_Down: [int]    #向下的队列
- distribute() -> void      #每次循环的最后，开始为等待队列里的request分配电梯

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
- wait_Queue: [Request] #总的等待队列   x我觉得上行队列和下行队列应该分开
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx